version: '3'

volumes:
    tmp-data:

services:
  klips-api:
    image: ghcr.io/klips-project/klips-api:latest
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - PORT=3000
      - DISPATCHERQUEUE=dispatcher
      - CONFIG_DIR=/klips-conf
    ports:
      - 127.0.0.1:3000:3000
    volumes:
      - ./klips-api-config:/klips-conf

  rabbitmq:
    image: rabbitmq:3.10-management
    restart: unless-stopped
    # hostname required for mounted data
    hostname: ${RABBITMQ_HOSTNAME}
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq:Z
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}

  dispatcher:
    image: ghcr.io/klips-project/mqm-worker/dispatcher:latest
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - RESULTSQUEUE=${RABBITMQ_RESULTSQUEUE}
      - WORKERQUEUE=dispatcher

  error-handler:
    build:
      context: worker/error-handler
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - RESULTSQUEUE=dispatcher
      - WORKERQUEUE=DeadLetterQueue

  send-mattermost-message:
    image: ghcr.io/klips-project/mqm-worker/send-mattermost-message:latest
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - RESULTSQUEUE=${RABBITMQ_RESULTSQUEUE}
      - WORKERQUEUE=send-mattermost-message
      - MATTERMOST_HOOK_URL=${MATTERMOST_HOOK_URL}
      - NODE_TLS_REJECT_UNAUTHORIZED=0

  send-email:
    image: ghcr.io/klips-project/mqm-worker/send-email:latest
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - WORKERQUEUE=send-email
      - RESULTSQUEUE=${RABBITMQ_RESULTSQUEUE}
      - MAILHOST=${MAILHOST}
      - MAILPORT=${MAILPORT}
      - SECURE=${MAILSECURE}
      - AUTHUSER=${MAILAUTHUSER}
      - AUTHPASS=${MAILAUTHPASS}
      - FROMSENDERNAME=${MAILFROMSENDERNAME}
      - FROMSENDEREMAIL=${MAILFROMSENDEREMAIL}
    depends_on:
      - rabbitmq
    restart: unless-stopped

  geoserver-publish-geotiff:
    image: ghcr.io/klips-project/mqm-worker/geoserver-publish-geotiff:latest
    restart: unless-stopped
    volumes:
      - tmp-data:/home/data:Z
    depends_on:
      - rabbitmq
    environment:
    - RABBITHOST=${RABBITMQ_HOSTNAME}
    - RABBITUSER=${RABBITMQ_DEFAULT_USER}
    - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
    - RESULTSQUEUE=${RABBITMQ_RESULTSQUEUE}
    - WORKERQUEUE=geoserver-publish-geotiff
    - GEOSERVER_REST_URL=http://${GEOSERVER_HOSTNAME}:8080/geoserver/rest/
    - GEOSERVER_USER=${GEOSERVER_USER}
    - GEOSERVER_PASSWORD=${GEOSERVER_PASSWORD}

  download-new-data-from-url:
    image: ghcr.io/klips-project/mqm-worker/download-new-data-from-url:latest
    restart: unless-stopped
    volumes:
      - tmp-data:/home/data:Z
    depends_on:
      - rabbitmq
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - RESULTSQUEUE=${RABBITMQ_RESULTSQUEUE}
      - WORKERQUEUE=download-new-data-from-url

  geotiff-validator:
    image: ghcr.io/klips-project/mqm-worker/geotiff-validator:latest
    restart: unless-stopped
    volumes:
      - tmp-data:/home/data:Z
    depends_on:
      - rabbitmq
    environment:
      - RABBITHOST=${RABBITMQ_HOSTNAME}
      - RABBITUSER=${RABBITMQ_DEFAULT_USER}
      - RABBITPASS=${RABBITMQ_DEFAULT_PASS}
      - RESULTSQUEUE=${RABBITMQ_RESULTSQUEUE}
      - WORKERQUEUE=geotiff-validator

  geoserver:
    image: meggsimum/geoserver:2.21.0
    restart: unless-stopped
    hostname: ${GEOSERVER_HOSTNAME}
    ports:
     - 8080:8080
    volumes:
      - ./geoserver_data:/opt/geoserver_data/:Z
    environment:
      - EXTRA_JAVA_OPTS=-Xms1g -Xmx2g
      - USE_VECTOR_TILES=0
      - USE_CORS=0

  geoserver-init:
    image: ghcr.io/klips-project/geoserver-init:latest
    depends_on:
      - geoserver
    environment:
        - GEOSERVER_REST_URL=http://${GEOSERVER_HOSTNAME}:8080/geoserver/rest/
        - GEOSERVER_DEFAULT_USER=${GEOSERVER_DEFAULT_USER}
        - GEOSERVER_DEFAULT_PASSWORD=${GEOSERVER_DEFAULT_PASSWORD}
        - GEOSERVER_USER=${GEOSERVER_USER}
        - GEOSERVER_PASSWORD=${GEOSERVER_PASSWORD}
    command: [ "./wait-for.sh", "${GEOSERVER_HOSTNAME}:8080", "--", "npm", "run", "start"]

  # only needed for development, it mocks a webspace where data can be loaded from
  nginx:
    image: nginx
    volumes:
      - ./mocked-webspace:/usr/share/nginx/html:ro

  # Not needed at the moment

  # postgres:
  #   image: postgis/postgis:13-3.1-alpine
  #   volumes:
  #     - ./postgres-data:/var/lib/postgresql/data
  #   ports:
  #     - 127.0.0.1:5432:5432
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
